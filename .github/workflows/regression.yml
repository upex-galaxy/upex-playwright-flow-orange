#? 🧪 Este PIPELINE ejecutará todas las pruebas y subirá los resultados a Jira XRay
name: 🧪 UPEX CI/CD Regression Pipeline
run-name: ${{github.actor}}👨🏻‍🔬 triggered Regression on ${{ github.event.inputs.environment }}

on:
  #* manual trigger:
  workflow_dispatch:
    inputs:
      environment:
        description: 🚀Select the Test Environment
        required: true
        default: 'QA'
        type: choice
        options:
        #? Orden de Deployments...
        - DEV #? donde los developers work
        - SANDBOX #? donde los QA realizan smoke y exploratory testing.
        - QA #? donde los QA realizan smoke, sanity y regression testing.
        - STAGING #? donde los QA realizan smoke, sanity o regression testing.
        - UAT #? donde los beta testers realizan acceptance testing.
        - PROD #? donde los usuarios finales usan la App.

jobs:
  RegressionTesting:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment }}
    env:
      TEST_ENV: ${{ github.event.inputs.environment }}
      ORANGE_USERNAME: ${{ secrets.ORANGE_USERNAME }}
      ORANGE_PASSWORD: ${{ secrets.ORANGE_PASSWORD }}

    steps:
    - name: 📘 Checkout Repo
      uses: actions/checkout@v4

    - name: 💽 Installing Node.js v20
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: 🍙 Bun Setup
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: 🧬 Install Project Dependencies
      run: bun install

    - name: 🔎 Check Typescript Code
      run: | #? Corre el linter de TypeScript para verificar errores de sintaxis.
        bun run check:ts

    - name: 🧪 Playwirght Run Regresion Testing
      run: |
        bun run test

    - name: 📡 Upload Artifact - EVIDENCE of Failing Tests
      if: failure() #? will only run if the tests fail because the screenshots are only taken when the tests fail.
      uses: actions/upload-artifact@v4
      with:
        name: regression-test-evidence
        path: test-results
        retention-days: 15

    - name: ✅ Import Test Results to Xray
      if: always()
      uses: mikepenz/xray-action@v3
      with:
        #OPCIONES PARA IMPORTAR LOS RESULTADOS DE PRUEBA A JIRA XRAY:
        username: ${{ secrets.XRAY_CLIENT_ID}}
        password: ${{ secrets.XRAY_CLIENT_SECRET}}
        testFormat: 'junit' #! NO CAMBIAR
        testPaths: 'test-junit-report/chrome-importer-report.xml' #! NO CAMBIAR
        testExecKey: 'GX3-4784' #! NO CAMBIAR
        projectKey: 'GX3' #! NO CAMBIAR
        testEnvironments: ${{ github.event.inputs.environment }}

    #* ----------------- ALLURE REPORT ----------------- #
    - name: 📊 Get Allure Report History
      uses: actions/checkout@v4
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages #? the branch used for the GitHub Pages content.
        path: gh-pages #? this is the directory where the previous allure reports were stored.

    - name: 📊 Build Allure Report
      uses: simple-elf/allure-report-action@master
      if: always()
      with:
        gh_pages: gh-pages #? the directory name to which the previous data was downloaded. Must be the same as the path value from the previous step.
        #? this copied data will be combined with the actual allure-report data to generate a new allure-history data to override the "Allure Dir".
        subfolder: ${{ env.TEST_ENV }}/regression #* IMPORTANT FIELD! Doing This, it will create a the "NEW github pages url" i.g /beta/regression 
        #? Note -> This subfolder is where "Allure Dir" data (allure-history) will be located. This is the path to be deployed to the gh-pages branch. 
        #? Note -> Use this subfolder if you want to split the reports as different test execution plans (i.g sanity, regression, smoke, etc) 
        #? Note -> If destination_dir is not specified in th next Step (Deploy Github Pages), this subfolder will be saved to the root of the branch!! 
        allure_results: reports/allure-results #? path of the actual allure-results generated by the tests.
        allure_report: allure-report #? path of the allure-report generated by the tests to be combined with the previous data.
        allure_history: allure-history #* This folder in the Repo root will be combined with given "subfolder" path in order to place the new truly "Allure Report" data!
        keep_reports: 15

    - name: 🚀 Deploy Allure Report to GitHub Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages #? the branch used for the GitHub Pages content. Where to deploy the publish_dir.
        publish_dir: allure-history/${{ env.TEST_ENV }}/regression #* IMPORTANT: The NEW "Allure Report" path to be taken for Deployment. Should be {allure_history + subfolder}.
        destination_dir: ${{ env.TEST_ENV }}/regression #* IMPORTANT: Dir inside the gh-pages branch where the Deployment will be placed. Should be {subfolder}.
        #? the allure-history will be located in the deploy destination_dir "./staging/smoke/" and inside it the file structure: '[{run}, last-history, index.html]'.
        #? where '{run}' is the number of the last allure generated... i.g 1, 2, 3, 4, 5, etc.
        #? And inside it, the structure: ['data', 'export', 'history', 'plugin', 'widgets', 'app.js', 'favicon.ico', 'index.html', 'styles.css']. The actual allure-report.
        #* When user navigates to the specified URL (i.g. /beta/regression/) it will automatically open the last allure report generated as /beta/regression/1/index.html.
        keep_files: true #? REQUIRED to work properly. it will keep the files from the previous deployments. ! DON'T SET TO FALSE, it will crash the folder.

  Ari-Slack-Notification:
    needs: [ RegressionTesting ]
    if: always() #? correrá después de que el SmokeTest y RegressionTesting hayan terminado.
    runs-on: ubuntu-latest
    steps:
    - name: 🔔 Slack Notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_USERNAME: Ari✨
        SLACK_MESSAGE: '🧪(${{ github.repository }}): ${{ github.actor }} triggered Regression Testing🚀'
        SLACK_COLOR: ${{ needs.RegressionTesting.result }}
        SLACK_ICON: ${{ secrets.ARI_PROFILE }}
